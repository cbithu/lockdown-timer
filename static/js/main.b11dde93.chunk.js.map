{"version":3,"sources":["components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","ProgressBar","root","flexGrow","width","barRoot","height","borderRadius","props","classes","percentage","className","LinearProgress","color","variant","value","App","state","day","hour","minute","second","percentage_complete","setInterval","date_now","Date","now","toFixed","delta","Math","abs","days","floor","hours","minutes","seconds","round","setState","this","app","Typography","component","heading","subHeading","Paper","elevation","paperRoot","countdownTime","countdownTimeVal","paperRootTwo","React","Component","display","alignItems","flexDirection","fontWeight","marginBottom","textDecoration","backgroundColor","padding","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b11dde93.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    width: \"90%\"\n  },\n  barRoot: {\n    height: \"10vh\",\n    borderRadius: \"2vh\"\n  }\n};\n\nfunction ProgressBar(props) {\n  const { classes, percentage } = props;\n  return (\n    <div className={classes.root}>\n      <LinearProgress\n        classes={{\n          root: classes.barRoot\n        }}\n        color=\"secondary\"\n        variant=\"determinate\"\n        value={percentage}\n      />\n    </div>\n  );\n}\n\nProgressBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  percentage: PropTypes.number\n};\n\nexport default withStyles(styles)(ProgressBar);\n","import ProgressBar from './ProgressBar';\n\nexport default ProgressBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport ProgressBar from './components/ProgressBar';\n\nconst styles = () => ({\n  app: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    flexGrow: 1\n  },\n  heading: {\n    color: \"#ffffff\",\n    fontWeight: \"bold\",\n    marginBottom: \"10vh\",\n    textDecoration: \"underline\"\n  },\n  subHeading: {\n    color: \"#ffffff\",\n    fontWeight: 500,\n    marginBottom: \"1vh\"\n  },\n  paperRoot: {\n    backgroundColor: \"#d3062b\",\n    padding: \"5vh 7vh\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"90%\",\n    marginBottom: \"10vh\"\n  },\n  paperRootTwo : {\n    backgroundColor: \"#d3062b\",\n    padding: \"1vh 2vh\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"15%\",\n    marginBottom: \"10vh\"\n  },\n  countdownTime : {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  countdownTimeVal: {\n    color: \"#ffffff\",\n    fontWeight: 900,\n  }\n});\n\nclass App extends React.Component {\n  state = {\n    day: null,\n    hour: null,\n    minute: null,\n    second: null,\n    percentage_complete: null\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      let date_start = 1584988200000;\n      let date_future = 1586888999000;\n      let date_now = Date.now();\n      let percentage_complete = (((date_now - date_start) / (date_future - date_start)) * 100).toFixed(4);\n\n      let delta = Math.abs(date_future - date_now) / 1000;\n\n      var days = Math.floor(delta / 86400);\n      delta -= days * 86400;\n\n      var hours = Math.floor(delta / 3600) % 24;\n      delta -= hours * 3600;\n\n      var minutes = Math.floor(delta / 60) % 60;\n      delta -= minutes * 60;\n\n      var seconds = Math.round(delta % 60);\n\n      this.setState({\n        day: days,\n        hour: hours,\n        minute: minutes,\n        second: seconds,\n        percentage_complete\n      })\n    }, 1000)\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { day, hour, minute, second, percentage_complete } = this.state;\n\n    return (\n      <div className={classes.app}>\n        <Typography variant=\"h1\" component=\"h2\" className={classes.heading}>\n          INDIA LOCKDOWN TIMER\n        </Typography>\n\n        <Typography variant=\"h4\" className={classes.subHeading}>\n          Lockdown will be over in ...\n        </Typography>\n\n        <Paper elevation={3} className={classes.paperRoot}>\n          <div className={classes.countdownTime}>\n            <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n              {day}\n            </Typography>\n            <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n              days\n            </Typography>\n          </div>\n          <div className={classes.countdownTime}>\n            <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n              {hour}\n            </Typography>\n            <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n              hrs\n            </Typography>\n          </div>\n          <div className={classes.countdownTime}>\n            <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n              {minute}\n            </Typography>\n            <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n              mins\n            </Typography>\n          </div>\n          <div className={classes.countdownTime}>\n            <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n              {second}\n            </Typography>\n            <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n              secs\n            </Typography>\n          </div>\n        </Paper>\n\n        <Typography variant=\"h4\" className={classes.subHeading}>\n          Percentage completed ...\n        </Typography>\n\n        <Paper elevation={3} className={classes.paperRootTwo}>\n          <Typography variant=\"h3\" className={classes.countdownTimeVal}>\n            {percentage_complete + \" %\"}\n          </Typography>\n        </Paper>\n\n        <ProgressBar percentage={percentage_complete} />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}